{"version":3,"sources":["svg/fog.svg","svg/sun.svg","svg/rain.svg","svg/clouds.svg","svg/thunderstorm.svg","svg/snow.svg","svg/moon.svg","svg/sunrise.svg","svg/sunset.svg","components/Form.js","components/Result.js","components/ResultBottom.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","props","className","onSubmit","submit","type","value","placeholder","onChange","change","Result","allValues","date","city","temp","main","err","description","country","sunset","sunrise","iconsList","Clouds","Clear","Sun","Fog","Mist","Haze","Rain","Drizzle","Thunderstorm","Snow","Smoke","currentTime","Date","moonTime","sunTime","Moon","content","notFound","toFixed","src","alt","ResultBottom","pressure","wind","sunriseTime","toLocaleTimeString","sunsetTime","Sunrise","Sunset","APIKey","App","state","handleInputChange","e","setState","target","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","name","sys","speed","weather","catch","prevState","geobytescity","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.59adfcf9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fog.1186186b.svg\";","module.exports = __webpack_public_path__ + \"static/media/sun.795a5585.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.a021adb0.svg\";","module.exports = __webpack_public_path__ + \"static/media/clouds.2afee49d.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunderstorm.4270c556.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.53d6b318.svg\";","module.exports = __webpack_public_path__ + \"static/media/moon.a409ed92.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunrise.086ad671.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunset.842357a9.svg\";","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <form className=\"form\" onSubmit={props.submit}>\r\n      <input\r\n        className=\"input\"\r\n        type=\"text\"\r\n        value={props.value}\r\n        placeholder=\"Choose a city...\"\r\n        onChange={props.change}\r\n      />\r\n      <button className=\"btn\">\r\n        <i className=\"fas fa-check-square\"></i>\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport Clouds from \"../svg/clouds.svg\";\r\nimport Sun from \"../svg/sun.svg\";\r\nimport Fog from \"../svg/fog.svg\";\r\nimport Rain from \"../svg/rain.svg\";\r\nimport Thunderstorm from \"../svg/thunderstorm.svg\";\r\nimport Snow from \"../svg/snow.svg\";\r\nimport Moon from \"../svg/moon.svg\";\r\n\r\nconst Result = props => {\r\n  const {\r\n    date,\r\n    city,\r\n    temp,\r\n    main,\r\n    err,\r\n    description,\r\n    country,\r\n    sunset,\r\n    sunrise\r\n  } = props.allValues;\r\n\r\n  const iconsList = {\r\n    Clouds,\r\n    Clear: Sun,\r\n    Fog,\r\n    Mist: Fog,\r\n    Haze: Fog,\r\n    Rain,\r\n    Drizzle: Rain,\r\n    Thunderstorm,\r\n    Snow,\r\n    Smoke: Fog\r\n  };\r\n\r\n  const currentTime = new Date();\r\n  const moonTime = new Date(sunset * 1000 + 1.5 * 60 * 60 * 1000);\r\n  const sunTime = new Date(sunrise * 1000 - 1.5 * 60 * 60 * 1000);\r\n\r\n  if (currentTime >= moonTime || currentTime <= sunTime) {\r\n    iconsList.Clear = Moon;\r\n  } else if (currentTime > sunTime && currentTime < moonTime) {\r\n    iconsList.Clear = Sun;\r\n  }\r\n\r\n  let content = null;\r\n  let notFound = null;\r\n\r\n  if (!err && city) {\r\n    content = (\r\n      <>\r\n        <p className=\"city\">\r\n          {city}\r\n          <span className=\"country\">, </span>\r\n          {country}\r\n        </p>\r\n        <p className=\"desc\">{description}</p>\r\n        <p className=\"degrees\">{temp.toFixed(0)} &#176;C</p>\r\n\r\n        <p className=\"clouds\">\r\n          {<img className=\"icons\" src={iconsList[main]} alt=\"weather icon\" />}\r\n        </p>\r\n        <p className=\"date\">{date}</p>\r\n      </>\r\n    );\r\n  } else {\r\n    notFound = (\r\n      <>\r\n        <p>City not found</p>\r\n        <p className=\"globe\">\r\n          <i className=\"fas fa-globe-africa\"></i>\r\n        </p>\r\n      </>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"position\">{err ? notFound : content}</div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\nimport Sunrise from \"../svg/sunrise.svg\";\r\nimport Sunset from \"../svg/sunset.svg\";\r\n\r\nconst ResultBottom = props => {\r\n  const { sunrise, sunset, pressure, wind, err, city } = props.allValues;\r\n\r\n  let content = null;\r\n\r\n  if (!err && city) {\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n\r\n    content = (\r\n      <div className=\"bottom\">\r\n        <div className=\"size\">\r\n          <img className=\"bottomIcons\" src={Sunrise} alt=\"icons\" />\r\n          <span>{sunriseTime}</span>\r\n        </div>\r\n        <div className=\"size\">\r\n          <p className=\"wind\">\r\n            <i className=\"fas fa-wind\"></i>\r\n          </p>\r\n\r\n          <span>{wind.toFixed(1)} m/s</span>\r\n        </div>\r\n\r\n        <div className=\"size\">\r\n          <p className=\"pressure\">\r\n            <i className=\"fas fa-poll\"></i>\r\n          </p>\r\n          <span>{pressure} hPa</span>\r\n        </div>\r\n        <div className=\"size\">\r\n          <img className=\"bottomIcons\" src={Sunset} alt=\"icons\" />\r\n\r\n          <span>{sunsetTime}</span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>{err ? \"\" : content}</div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ResultBottom;\r\n","import React, { Component } from \"react\";\nimport Form from \"./Form.js\";\nimport Result from \"./Result.js\";\nimport ResultBottom from \"./ResultBottom\";\nimport \"./App.css\";\n\nconst APIKey = \"86dec29db52e5cbbec58568a6f0ae597\";\n\nclass App extends Component {\n  state = {\n    value: \"\",\n    date: \"\",\n    city: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    pressure: \"\",\n    wind: \"\",\n    main: \"\",\n    err: false,\n    country: \"\",\n    description: \"\"\n  };\n\n  componentDidMount() {\n    fetch(\n      \"https://cors-anywhere.herokuapp.com/http://gd.geobytes.com/GetCityDetails\"\n    )\n      .then(response => {\n        if (response.ok) {\n          return response;\n        }\n        throw Error(\"nie udało się\");\n      })\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          value: data.geobytescity\n        });\n        this.handleCitySubmit();\n      });\n  }\n\n  handleInputChange = e => {\n    this.setState({\n      value: e.target.value\n    });\n  };\n\n  handleCitySubmit = e => {\n    if (e) {\n      e.preventDefault();\n    }\n\n    const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`;\n\n    fetch(API)\n      .then(response => {\n        if (response.ok) {\n          return response;\n        }\n        throw Error(\"nie udało się\");\n      })\n      .then(response => response.json())\n      .then(data => {\n        const time = new Date().toLocaleString();\n\n        this.setState(() => ({\n          err: false,\n          date: time,\n          city: data.name,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          temp: data.main.temp,\n          pressure: data.main.pressure,\n          wind: data.wind.speed,\n          main: data.weather[0].main,\n          description: data.weather[0].description,\n          country: data.sys.country,\n          value: \"\"\n        }));\n      })\n      .catch(() => {\n        this.setState(prevState => ({\n          err: true,\n          city: prevState.value\n        }));\n      });\n  };\n  render() {\n    return (\n      <>\n        <div className=\"container\">\n          <main className=\"main\">\n            <Form\n              value={this.state.value}\n              change={this.handleInputChange}\n              submit={this.handleCitySubmit}\n            />\n            <Result allValues={this.state} />\n          </main>\n          <div className=\"bottom\">\n            <ResultBottom allValues={this.state} />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}